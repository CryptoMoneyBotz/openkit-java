buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'nl.javadude.gradle.plugins:license-gradle-plugin:0.11.0'
        classpath 'ru.vyarus:gradle-animalsniffer-plugin:1.4.6'
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.8.2'
    }
}

group 'com.dynatrace.openkit'
version '1.3.0-SNAPSHOT'

def groupString = group
def title = 'Dynatrace OpenKit SDK for Java'
def vendor = 'Dynatrace LLC'

apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'ru.vyarus.animalsniffer'
apply plugin: 'jacoco'
apply plugin: 'com.github.kt3k.coveralls'

apply from: "gradle/license.gradle"

repositories {
    mavenCentral()
}

def target = System.getenv("TARGET_COMPATIBILITY") ?: "6"
def jvmToTest = System.getenv("JVM_TO_TEST") ?: "6"

sourceCompatibility = 1.6
targetCompatibility = "1." + target

dependencies {
    signature 'org.codehaus.mojo.signature:java16:1.1@signature'
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
    testCompile group: 'org.mockito', name: 'mockito-all', version: '1.10.19'
}

jar {
    baseName = 'openkit'
    if (System.getenv('TRAVIS') != null) {
        classifier = 'java' + target
    }

    // split version into specification & implementation version
    def specVersion = version
    def implVersion = ''
    def splitIndex = version.indexOf('-')
    if (splitIndex != -1) {
        implVersion = version.substring(splitIndex + 1)
        specVersion = version.take(splitIndex)
    }

    // append build information to the spec version
    def buildNumber = System.getenv()['BUILD_NUMBER']
    if (buildNumber != null) {
        implVersion = "${implVersion}-b${buildNumber}"
    }

    def name = groupString.replaceAll('\\.', '/')

    manifest {
        attributes 'Name': "${name}/",
                'Specification-Title': title,
                'Specification-Version': specVersion,
                'Specification-Vendor': vendor,
                'Implementation-Title': groupString,
                'Implementation-Version': implVersion,
                'Implementation-Vendor': vendor,
                'url': 'https://github.com/Dynatrace/openkit-java'
    }
}

def coverageReportDir = file("$buildDir/reports/coverage/jacoco")

jacoco {
    toolVersion = "0.8.1"
    reportsDir = coverageReportDir
}

def coverageXmlReportFile = file("${coverageReportDir}/jacocoReport.xml")

jacocoTestReport {
    reports {
        xml.enabled = true
        xml.destination = coverageXmlReportFile
        html.enabled = true
        html.destination = file("${coverageReportDir}/html")
    }
}

coveralls {
    jacocoReportPath = coverageXmlReportFile.toString()
}

tasks.coveralls {
    dependsOn 'check'
    onlyIf { System.env.'CI' }
}

task sourceJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allJava
}

task javadocZip(type: Zip, dependsOn: javadoc) {
    baseName = 'openkit'
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

artifacts {
    archives sourceJar, javadocZip, javadocJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId project.name

            from components.java

            artifact sourceJar {
                classifier "sources"
            }
            artifact javadocJar {
                classifier "javadoc"
            }
        }
    }
}

task printVersion {
    doLast {
        def buildNumber = System.getenv()['BUILD_NUMBER']
        if (buildNumber != null) {
            logger.quiet "${version}-b${buildNumber}"
        } else {
            logger.quiet version
        }
    }
}

// run each test for every JAVA_HOME_* environment which is specified and set as environment
[target, jvmToTest.split(",")].combinations { targetJVM, envJVM ->
    if(System.getenv("JAVA_HOME_" + envJVM) != null) {
        def configName = "${targetJVM}-JAVA_HOME_${envJVM}"
        task "test-${configName}"(type: Test) {
            exclude '**/local/*.class'
            executable = System.getenv("JAVA_HOME_" + envJVM) + "/bin/java"
        }
        tasks.test.dependsOn tasks."test-${configName}"
    } else {
        logger.quiet("Can't find JAVA_HOME_" + envJVM + ". Test ignored!")

    }
}
